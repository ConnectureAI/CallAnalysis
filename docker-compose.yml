version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: call-analysis-db
    environment:
      POSTGRES_DB: call_analysis
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - call-analysis-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: call-analysis-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - call-analysis-network

  # Call Analysis API (Development)
  api-dev:
    build:
      context: .
      target: development
    container_name: call-analysis-api-dev
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=call_analysis
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECURITY_SECRET_KEY=dev-secret-key-change-in-production-must-be-at-least-32-chars
    volumes:
      - .:/app
      - api_data:/app/data
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - call-analysis-network
    profiles:
      - dev

  # Call Analysis API (Production)
  api:
    build:
      context: .
      target: production
    container_name: call-analysis-api
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=call_analysis
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECURITY_SECRET_KEY=${SECURITY_SECRET_KEY:-please-change-this-secret-key-in-production}
      - LOG_LEVEL=INFO
    volumes:
      - api_data:/app/data
      - api_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - call-analysis-network
    profiles:
      - prod

  # Background Worker (Production)
  worker:
    build:
      context: .
      target: worker
    container_name: call-analysis-worker
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=call_analysis
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - api_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - call-analysis-network
    profiles:
      - prod

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: call-analysis-nginx
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - call-analysis-network
    profiles:
      - prod

  # Database Migration Service
  migration:
    build:
      context: .
      target: production
    container_name: call-analysis-migration
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=call_analysis
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    volumes:
      - ./migrations:/app/migrations
    depends_on:
      postgres:
        condition: service_healthy
    command: ["alembic", "upgrade", "head"]
    networks:
      - call-analysis-network
    profiles:
      - migration

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_data:
    driver: local
  api_logs:
    driver: local

networks:
  call-analysis-network:
    driver: bridge