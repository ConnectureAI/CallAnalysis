name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_call_analysis
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Create test environment file
      run: |
        cat > .env << EOF
        ENVIRONMENT=testing
        DEBUG=true
        DB_HOST=localhost
        DB_PORT=5432
        DB_NAME=test_call_analysis
        DB_USER=postgres
        DB_PASSWORD=postgres
        REDIS_HOST=localhost
        REDIS_PORT=6379
        OPENAI_API_KEY=sk-test-fake-key-for-testing-only
        SECURITY_SECRET_KEY=test-secret-key-for-testing-only-change-in-production
        EOF

    - name: Run code formatting check
      run: |
        black --check src/ tests/

    - name: Run linting
      run: |
        ruff check src/ tests/

    - name: Run type checking
      run: |
        mypy src/

    - name: Wait for services
      run: |
        sleep 10
        pg_isready -h localhost -p 5432 -U postgres

    - name: Setup database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_call_analysis
      run: |
        # Initialize database tables
        python -c "
        import asyncio
        from src.call_analysis.database import init_db
        asyncio.run(init_db())
        "

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_call_analysis
      run: |
        pytest --cov=src/call_analysis --cov-report=xml --cov-report=html --cov-fail-under=70

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit[toml]

    - name: Run safety check
      run: |
        safety check

    - name: Run bandit security check
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  # Build Docker images
  build:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Integration tests with real services
  integration-test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: integration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Compose
      run: |
        docker compose version

    - name: Create integration test environment
      run: |
        cat > .env << EOF
        ENVIRONMENT=testing
        DEBUG=false
        DB_HOST=localhost
        DB_PORT=5432
        DB_NAME=integration_test
        DB_USER=postgres
        DB_PASSWORD=postgres
        REDIS_HOST=localhost
        REDIS_PORT=6379
        OPENAI_API_KEY=sk-test-fake-key-for-integration-testing
        SECURITY_SECRET_KEY=integration-test-secret-key-change-in-production
        EOF

    - name: Pull latest images
      run: |
        docker compose pull

    - name: Run integration tests
      run: |
        # Start services using docker-compose
        docker compose --profile dev up -d --wait
        
        # Wait for services to be ready
        sleep 30
        
        # Run integration tests
        docker compose exec -T api-dev pytest tests/integration/ -v
        
        # Test API endpoints
        curl -f http://localhost:8000/health
        curl -f http://localhost:8000/health/detailed

    - name: Cleanup
      if: always()
      run: |
        docker compose down -v

  # Deploy to staging (on develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # This could involve SSH to staging server, kubectl commands, etc.

  # Deploy to production (on release)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.event_name == 'release'
    environment: production

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # This could involve SSH to production server, kubectl commands, etc.

    - name: Create deployment notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: 'Call Analysis System deployed to production!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()

  # Performance benchmarking
  benchmark:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install locust

    - name: Run performance benchmarks
      run: |
        # Run lightweight performance tests
        python -m pytest tests/performance/ --benchmark-only --benchmark-json=benchmark.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json